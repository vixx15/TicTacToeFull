/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "play_action_logic(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "money_refund_logic()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA1MTEgNDQ4IDI5MiAxNDYgMjczCmJ5dGVjYmxvY2sgMHg2NzYxNmQ2NTVmNzM3NDYxNzQ3NTczIDB4NzA2YzYxNzk2NTcyNWY2ZjVmNzM3NDYxNzQ2NSAweDcwNmM2MTc5NjU3MjVmNzg1ZjczNzQ2MTc0NjUgMHggMHg3MDZjNjE3OTY1NzI1ZjZmNWY2OTZlNjQ2NTc4IDB4NjI2NTc0NWY2MTZkNmY3NTZlNzQgMHg2MjZmNjE3MjY0NWY3Mzc0NjE3NDY1IDB4MTUxZjdjNzUKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwMmJlY2UxMSAvLyAiaGVsbG8oc3RyaW5nKXN0cmluZyIKPT0KYm56IG1haW5fbDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4ZWM0NWMyMiAvLyAicGxheV9hY3Rpb25fbG9naWModWludDY0KXN0cmluZyIKPT0KYm56IG1haW5fbDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg3YjNlNzEzMCAvLyAibW9uZXlfcmVmdW5kX2xvZ2ljKCl2b2lkIgo9PQpibnogbWFpbl9sNQplcnIKbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBtb25leXJlZnVuZGxvZ2ljY2FzdGVyXzExCmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHBsYXlhY3Rpb25sb2dpY2Nhc3Rlcl8xMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl85CmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMgp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sMTEKZXJyCm1haW5fbDExOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBvcHRpbl8yCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgY3JlYXRlXzEKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBoZWxsbwpoZWxsb18wOgpwcm90byAxIDEKYnl0ZWNfMyAvLyAiIgpwdXNoYnl0ZXMgMHg0ODY1NmM2YzZmMmMyMCAvLyAiSGVsbG8sICIKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmNvbmNhdApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGNyZWF0ZQpjcmVhdGVfMToKcHJvdG8gMCAwCmJ5dGVjIDUgLy8gImJldF9hbW91bnQiCnB1c2hpbnQgMTAwMDAwMCAvLyAxMDAwMDAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDYgLy8gImJvYXJkX3N0YXRlIgpieXRlY18zIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzAgLy8gImdhbWVfc3RhdHVzIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJwbGF5ZXJfb19pbmRleCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAicGxheWVyX29fc3RhdGUiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzIgLy8gInBsYXllcl94X3N0YXRlIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIG9wdF9pbgpvcHRpbl8yOgpwcm90byAwIDAKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBoYXNfcGxheWVyX3dvbgpoYXNwbGF5ZXJ3b25fMzoKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQppbnRjXzMgLy8gNDQ4CiYKaW50Y18zIC8vIDQ0OAo9PQpmcmFtZV9kaWcgLTEKcHVzaGludCA1NiAvLyA1NgomCnB1c2hpbnQgNTYgLy8gNTYKPT0KfHwKZnJhbWVfZGlnIC0xCnB1c2hpbnQgNyAvLyA3CiYKcHVzaGludCA3IC8vIDcKPT0KfHwKZnJhbWVfZGlnIC0xCmludGMgNCAvLyAyOTIKJgppbnRjIDQgLy8gMjkyCj09Cnx8CmZyYW1lX2RpZyAtMQppbnRjIDUgLy8gMTQ2CiYKaW50YyA1IC8vIDE0Ngo9PQp8fApmcmFtZV9kaWcgLTEKcHVzaGludCA3MyAvLyA3MwomCnB1c2hpbnQgNzMgLy8gNzMKPT0KfHwKZnJhbWVfZGlnIC0xCmludGMgNiAvLyAyNzMKJgppbnRjIDYgLy8gMjczCj09Cnx8CmZyYW1lX2RpZyAtMQpwdXNoaW50IDg0IC8vIDg0CiYKcHVzaGludCA4NCAvLyA4NAo9PQp8fApibnogaGFzcGxheWVyd29uXzNfbDIKaW50Y18wIC8vIDAKYiBoYXNwbGF5ZXJ3b25fM19sMwpoYXNwbGF5ZXJ3b25fM19sMjoKaW50Y18xIC8vIDEKaGFzcGxheWVyd29uXzNfbDM6CnJldHN1YgoKLy8gaXNfdGllCmlzdGllXzQ6CnByb3RvIDAgMQpieXRlY18wIC8vICJnYW1lX3N0YXR1cyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KYm56IGlzdGllXzRfbDIKaW50Y18wIC8vIDAKYiBpc3RpZV80X2wzCmlzdGllXzRfbDI6CmludGNfMiAvLyA1MTEKYnl0ZWNfMiAvLyAicGxheWVyX3hfc3RhdGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzEgLy8gInBsYXllcl9vX3N0YXRlIgphcHBfZ2xvYmFsX2dldAp8Cj09CmlzdGllXzRfbDM6CnJldHN1YgoKLy8gYXZhaWxhYmxlX3Bvc2l0aW9ucwphdmFpbGFibGVwb3NpdGlvbnNfNToKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKfAppbnRjXzIgLy8gNTExCiYKaW50Y18yIC8vIDUxMQpeCnJldHN1YgoKLy8gc2VsZWN0X3Bvc2l0aW9uX2Zvcl9vCnNlbGVjdHBvc2l0aW9uZm9yb182Ogpwcm90byAxIDEKaW50Y18wIC8vIDAKc3RvcmUgMApzZWxlY3Rwb3NpdGlvbmZvcm9fNl9sMToKbG9hZCAwCnB1c2hpbnQgOSAvLyA5CjwKYnogc2VsZWN0cG9zaXRpb25mb3JvXzZfbDUKZnJhbWVfZGlnIC0xCmxvYWQgMApnZXRiaXQKaW50Y18xIC8vIDEKPT0KYm56IHNlbGVjdHBvc2l0aW9uZm9yb182X2w0CmxvYWQgMAppbnRjXzEgLy8gMQorCnN0b3JlIDAKYiBzZWxlY3Rwb3NpdGlvbmZvcm9fNl9sMQpzZWxlY3Rwb3NpdGlvbmZvcm9fNl9sNDoKYnl0ZWMgNCAvLyAicGxheWVyX29faW5kZXgiCmxvYWQgMAphcHBfZ2xvYmFsX3B1dApzZWxlY3Rwb3NpdGlvbmZvcm9fNl9sNToKYnl0ZWMgNCAvLyAicGxheWVyX29faW5kZXgiCmFwcF9nbG9iYWxfZ2V0CnJldHN1YgoKLy8gcGxheV9hY3Rpb25fbG9naWMKcGxheWFjdGlvbmxvZ2ljXzc6CnByb3RvIDEgMQpieXRlY18zIC8vICIiCmZyYW1lX2RpZyAtMQppbnRjXzAgLy8gMAo+PQphc3NlcnQKZnJhbWVfZGlnIC0xCnB1c2hpbnQgOCAvLyA4Cjw9CmFzc2VydApieXRlY18wIC8vICJnYW1lX3N0YXR1cyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmJ5dGVjXzIgLy8gInBsYXllcl94X3N0YXRlIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQpmcmFtZV9kaWcgLTEKc2hsCiYKaW50Y18wIC8vIDAKPT0KYnl0ZWNfMSAvLyAicGxheWVyX29fc3RhdGUiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAtMQpzaGwKJgppbnRjXzAgLy8gMAo9PQomJgphc3NlcnQKYnl0ZWNfMiAvLyAicGxheWVyX3hfc3RhdGUiCmJ5dGVjXzIgLy8gInBsYXllcl94X3N0YXRlIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQpmcmFtZV9kaWcgLTEKc2hsCnwKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAicGxheWVyX3hfc3RhdGUiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgaGFzcGxheWVyd29uXzMKYm56IHBsYXlhY3Rpb25sb2dpY183X2wxNQpwbGF5YWN0aW9ubG9naWNfN19sMToKY2FsbHN1YiBpc3RpZV80CmJueiBwbGF5YWN0aW9ubG9naWNfN19sMTQKYnl0ZWNfMCAvLyAiZ2FtZV9zdGF0dXMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj09CmJueiBwbGF5YWN0aW9ubG9naWNfN19sMTIKcGxheWFjdGlvbmxvZ2ljXzdfbDM6CmJ5dGVjXzAgLy8gImdhbWVfc3RhdHVzIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo9PQpibnogcGxheWFjdGlvbmxvZ2ljXzdfbDExCmJ5dGVjXzAgLy8gImdhbWVfc3RhdHVzIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQo9PQpibnogcGxheWFjdGlvbmxvZ2ljXzdfbDEwCmJ5dGVjXzAgLy8gImdhbWVfc3RhdHVzIgphcHBfZ2xvYmFsX2dldApwdXNoaW50IDIgLy8gMgo9PQpibnogcGxheWFjdGlvbmxvZ2ljXzdfbDkKYnl0ZWNfMCAvLyAiZ2FtZV9zdGF0dXMiCmFwcF9nbG9iYWxfZ2V0CnB1c2hpbnQgMyAvLyAzCj09CmJueiBwbGF5YWN0aW9ubG9naWNfN19sOAplcnIKcGxheWFjdGlvbmxvZ2ljXzdfbDg6CnB1c2hieXRlcyAweDAwMDk0OTc0NzMyMDYxMjA3NDY5NjUgLy8gMHgwMDA5NDk3NDczMjA2MTIwNzQ2OTY1CmZyYW1lX2J1cnkgMApiIHBsYXlhY3Rpb25sb2dpY183X2wxNgpwbGF5YWN0aW9ubG9naWNfN19sOToKcHVzaGJ5dGVzIDB4MDAxNzU5NmY3NTIwNjg2MTc2NjUyMDZjNmY3Mzc0MjA3NDY4NjUyMDY3NjE2ZDY1MjEgLy8gMHgwMDE3NTk2Zjc1MjA2ODYxNzY2NTIwNmM2ZjczNzQyMDc0Njg2NTIwNjc2MTZkNjUyMQpmcmFtZV9idXJ5IDAKYiBwbGF5YWN0aW9ubG9naWNfN19sMTYKcGxheWFjdGlvbmxvZ2ljXzdfbDEwOgpwdXNoYnl0ZXMgMHgwMDIzNTk2Zjc1MjA2ODYxNzY2NTIwNzM3NTYzNjM2MzY1NzM2Njc1NmM2Yzc5MjA3NzZmNmUyMDc0Njg2NTIwNjc2MTZkNjUyMSAvLyAweDAwMjM1OTZmNzUyMDY4NjE3NjY1MjA3Mzc1NjM2MzYzNjU3MzY2NzU2YzZjNzkyMDc3NmY2ZTIwNzQ2ODY1MjA2NzYxNmQ2NTIxCmZyYW1lX2J1cnkgMApiIHBsYXlhY3Rpb25sb2dpY183X2wxNgpwbGF5YWN0aW9ubG9naWNfN19sMTE6CmJ5dGVjIDYgLy8gImJvYXJkX3N0YXRlIgphcHBfZ2xvYmFsX2dldApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApiIHBsYXlhY3Rpb25sb2dpY183X2wxNgpwbGF5YWN0aW9ubG9naWNfN19sMTI6CmJ5dGVjXzEgLy8gInBsYXllcl9vX3N0YXRlIgpieXRlY18xIC8vICJwbGF5ZXJfb19zdGF0ZSIKYXBwX2dsb2JhbF9nZXQKaW50Y18xIC8vIDEKYnl0ZWNfMiAvLyAicGxheWVyX3hfc3RhdGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzEgLy8gInBsYXllcl9vX3N0YXRlIgphcHBfZ2xvYmFsX2dldApjYWxsc3ViIGF2YWlsYWJsZXBvc2l0aW9uc181CmNhbGxzdWIgc2VsZWN0cG9zaXRpb25mb3JvXzYKc2hsCnwKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAicGxheWVyX29fc3RhdGUiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgaGFzcGxheWVyd29uXzMKYnogcGxheWFjdGlvbmxvZ2ljXzdfbDMKYnl0ZWNfMCAvLyAiZ2FtZV9zdGF0dXMiCnB1c2hpbnQgMiAvLyAyCmFwcF9nbG9iYWxfcHV0CmIgcGxheWFjdGlvbmxvZ2ljXzdfbDMKcGxheWFjdGlvbmxvZ2ljXzdfbDE0OgpieXRlY18wIC8vICJnYW1lX3N0YXR1cyIKcHVzaGludCAzIC8vIDMKYXBwX2dsb2JhbF9wdXQKYiBwbGF5YWN0aW9ubG9naWNfN19sMwpwbGF5YWN0aW9ubG9naWNfN19sMTU6CmJ5dGVjXzAgLy8gImdhbWVfc3RhdHVzIgppbnRjXzEgLy8gMQphcHBfZ2xvYmFsX3B1dApiIHBsYXlhY3Rpb25sb2dpY183X2wxCnBsYXlhY3Rpb25sb2dpY183X2wxNjoKcmV0c3ViCgovLyBtb25leV9yZWZ1bmRfbG9naWMKbW9uZXlyZWZ1bmRsb2dpY184Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiZ2FtZV9zdGF0dXMiCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCj09CmFzc2VydAppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQp0eG4gU2VuZGVyCml0eG5fZmllbGQgUmVjZWl2ZXIKYnl0ZWMgNSAvLyAiYmV0X2Ftb3VudCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBBbW91bnQKaXR4bl9zdWJtaXQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfOToKcHJvdG8gMCAwCmJ5dGVjXzMgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgaGVsbG9fMApmcmFtZV9idXJ5IDAKYnl0ZWMgNyAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBwbGF5X2FjdGlvbl9sb2dpY19jYXN0ZXIKcGxheWFjdGlvbmxvZ2ljY2FzdGVyXzEwOgpwcm90byAwIDAKYnl0ZWNfMyAvLyAiIgppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgcGxheWFjdGlvbmxvZ2ljXzcKZnJhbWVfYnVyeSAwCmJ5dGVjIDcgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gbW9uZXlfcmVmdW5kX2xvZ2ljX2Nhc3Rlcgptb25leXJlZnVuZGxvZ2ljY2FzdGVyXzExOgpwcm90byAwIDAKY2FsbHN1YiBtb25leXJlZnVuZGxvZ2ljXzgKcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "bet_amount": {
          "type": "uint64",
          "key": "bet_amount",
          "descr": ""
        },
        "board_state": {
          "type": "bytes",
          "key": "board_state",
          "descr": ""
        },
        "game_status": {
          "type": "uint64",
          "key": "game_status",
          "descr": ""
        },
        "player_o_index": {
          "type": "uint64",
          "key": "player_o_index",
          "descr": ""
        },
        "player_o_state": {
          "type": "uint64",
          "key": "player_o_state",
          "descr": ""
        },
        "player_x_state": {
          "type": "uint64",
          "key": "player_x_state",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "tic_tac_toe_single_player",
    "methods": [
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "play_action_logic",
        "args": [
          {
            "type": "uint64",
            "name": "position_index"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "money_refund_logic",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the TicTacToeSinglePlayer smart contract.
 */
export type TicTacToeSinglePlayer = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
    & Record<'play_action_logic(uint64)string' | 'play_action_logic', {
      argsObj: {
        position_index: bigint | number
      }
      argsTuple: [position_index: bigint | number]
      returns: string
    }>
    & Record<'money_refund_logic()void' | 'money_refund_logic', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'bet_amount'?: IntegerState
      'board_state'?: BinaryState
      'game_status'?: IntegerState
      'player_o_index'?: IntegerState
      'player_o_state'?: IntegerState
      'player_x_state'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type TicTacToeSinglePlayerSig = keyof TicTacToeSinglePlayer['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TicTacToeSinglePlayerSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the TicTacToeSinglePlayer smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TicTacToeSinglePlayerSig> = TicTacToeSinglePlayer['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TicTacToeSinglePlayer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicTacToeSinglePlayerSig> = TicTacToeSinglePlayer['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type TicTacToeSinglePlayerCreateCalls = (typeof TicTacToeSinglePlayerCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type TicTacToeSinglePlayerCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type TicTacToeSinglePlayerDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TicTacToeSinglePlayerCreateCalls) => TicTacToeSinglePlayerCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TicTacToeSinglePlayerCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the tic_tac_toe_single_player smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the tic_tac_toe_single_player smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the play_action_logic(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static playActionLogic(args: MethodArgs<'play_action_logic(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'play_action_logic(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.position_index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the money_refund_logic()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static moneyRefundLogic(args: MethodArgs<'money_refund_logic()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'money_refund_logic()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the tic_tac_toe_single_player smart contract
 */
export class TicTacToeSinglePlayerClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `TicTacToeSinglePlayerClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TicTacToeSinglePlayer['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the tic_tac_toe_single_player smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TicTacToeSinglePlayerDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(TicTacToeSinglePlayerCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the tic_tac_toe_single_player smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the tic_tac_toe_single_player smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.optIn(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the tic_tac_toe_single_player smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TicTacToeSinglePlayerCallFactory.hello(args, params))
  }

  /**
   * Calls the play_action_logic(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public playActionLogic(args: MethodArgs<'play_action_logic(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TicTacToeSinglePlayerCallFactory.playActionLogic(args, params))
  }

  /**
   * Calls the money_refund_logic()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public moneyRefundLogic(args: MethodArgs<'money_refund_logic()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TicTacToeSinglePlayerCallFactory.moneyRefundLogic(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TicTacToeSinglePlayer['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bet_amount() {
        return TicTacToeSinglePlayerClient.getIntegerState(state, 'bet_amount')
      },
      get board_state() {
        return TicTacToeSinglePlayerClient.getBinaryState(state, 'board_state')
      },
      get game_status() {
        return TicTacToeSinglePlayerClient.getIntegerState(state, 'game_status')
      },
      get player_o_index() {
        return TicTacToeSinglePlayerClient.getIntegerState(state, 'player_o_index')
      },
      get player_o_state() {
        return TicTacToeSinglePlayerClient.getIntegerState(state, 'player_o_state')
      },
      get player_x_state() {
        return TicTacToeSinglePlayerClient.getIntegerState(state, 'player_x_state')
      },
    }
  }

  public compose(): TicTacToeSinglePlayerComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      playActionLogic(args: MethodArgs<'play_action_logic(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.playActionLogic(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      moneyRefundLogic(args: MethodArgs<'money_refund_logic()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.moneyRefundLogic(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as TicTacToeSinglePlayerComposer
  }
}
export type TicTacToeSinglePlayerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TicTacToeSinglePlayerComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Calls the play_action_logic(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  playActionLogic(args: MethodArgs<'play_action_logic(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TicTacToeSinglePlayerComposer<[...TReturns, MethodReturn<'play_action_logic(uint64)string'>]>

  /**
   * Calls the money_refund_logic()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  moneyRefundLogic(args: MethodArgs<'money_refund_logic()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TicTacToeSinglePlayerComposer<[...TReturns, MethodReturn<'money_refund_logic()void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the tic_tac_toe_single_player smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): TicTacToeSinglePlayerComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the tic_tac_toe_single_player smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): TicTacToeSinglePlayerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): TicTacToeSinglePlayerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TicTacToeSinglePlayerComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<TicTacToeSinglePlayerComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type TicTacToeSinglePlayerComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type TicTacToeSinglePlayerComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
